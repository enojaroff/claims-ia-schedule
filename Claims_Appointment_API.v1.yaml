openapi: 3.0.0
info:
  version: 1.0.0
  title: Claims IA Scheduling API
  description: |+
    L'API RDV de Claims IA permet la prise de rendez-vous d'expertise ou d'intervention d'artisan depuis l'application Claims MRH. A ce titre, elle doit être implémentée par les sociétés qui souhaitent fournir ce service de prise de rendez-vous.

    L'API respecte le standard REST et utilise le protocole HTTP. Les messages échangés sont au format JSON.


    Une clé est nécessaire pour utiliser l'API. Cette clé doit être fournie par la société qui implémente l'API.



  contact:
    name: Edouard Nojaroff
    email: e.nojaroff@claims-ia.fr
servers:
  - url: 'https://base_url/claims/api/v1'
    description: Base URL
tags:
  - name: Account
    description: ''
  - name: Appointment
    description: Rendez-vous
  - name: Availability
    description: Créneau horaire disponible
  - name: Client
    description: ''
  - name: Custom Field
    description: ''
  - name: Location
    description: "Emplacement/adresse d'un site"
  - name: Time Zone
    description: ''
paths:
  /account/authenticate:
    post:
      tags:
        - Account
      summary: Authenticate
      operationId: AccountAuthenticate
      description: |+
        La première étape dans l'utilisation de l'API Claims est l'authentification via un compte.
        Les informations envoyées sont l'email, le mot de passe du compte, et la clé de l'API.

        La réponse contient un jeton de session (session_token) qui sera utilisé à chaque appel de l'API.
        Pour des raisons de sécurité, le jeton de session doit expirer au bout de 24 heures; une nouvelle authentification est alors nécessaire.


      parameters:
        - in: query
          name: email
          description: Account owner email address
          required: true
          schema:
            type: string
            format: email
        - in: query
          name: password
          description: Account owner password
          schema:
            type: string
            format: password
        - in: query
          name: token
          description: API key
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseStatus:
                    type: string
            application/xml:
              schema:
                type: object
                properties:
                  '':
                    type: string
        '401':
          description: "Compte inactif ou clé d'API incorrecte"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 3
                  statusDescriptions:
                    type: string
                    example: Account is not active
                  data:
                    type: object
                    nullable: true
  /account/logout:
    get:
      tags:
        - Account
      summary: Logout
      security:
        - tk00001: []
      responses:
        '200':
          description: Logout successful
      operationId: AccountLogout
      description: Logout
  /account/reset_password:
    post:
      tags:
        - Account
      summary: Change account credentials
      description: Modifies the account password using the valid hash_code that was used when initiating the password reset process.
      parameters:
        - name: email
          schema:
            type: string
            format: email
          required: true
          in: query
          example: email@company.com
        - name: hash_code
          schema:
            type: string
          required: true
          in: query
          example: test_hash_code
        - name: new_password
          schema:
            type: string
            format: password
          required: true
          in: query
          example: test_new_password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    description: Status of the operation
                    example: 0
                  statusDescriptions:
                    type: string
                    example: Password changed
                    description: Description of the status
                  data:
                    type: object
                    nullable: true
      operationId: AccountResetPassword
  /location:
    get:
      tags:
        - Location
      summary: List locations
      description: Using this endpoint you can retrieve the attributes of all your locations
      security:
        - tk00001: []
      parameters:
        - name: id
          in: query
          description: Location ID
          schema:
            type: integer
        - name: company_id
          in: query
          description: Company id
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: street1
          in: query
          schema:
            type: string
        - name: street2
          in: query
          schema:
            type: string
        - name: city
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: tags
          in: query
          schema:
            type: string
        - name: photo
          in: query
          schema:
            type: string
        - name: paypal_email
          in: query
          schema:
            type: string
        - name: timezone_id
          in: query
          description: The timezone id
          schema:
            type: integer
        - name: virtual
          in: query
          schema:
            type: boolean
        - name: tmp_default
          in: query
          schema:
            type: boolean
        - name: has_links
          in: query
          schema:
            type: boolean
        - name: include_links
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: LocationList
    post:
      tags:
        - Location
      summary: Create location
      description: Using this endpoint you can create a new location within the account
      security:
        - tk00001: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Location'
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      operationId: LocationCreate
  '/appointments/{id}':
    get:
      tags:
        - Appointment
      summary: "LIRE les détails d'un rendez-vous"
      security:
        - tk00001: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Appointment'
      operationId: AppointmentGetInfo
      description: "LIRE les détails d'un rendez-vous"
    put:
      tags:
        - Appointment
      summary: Modify appointment
      description: Using this endpoint you can modify the attributes for an appointment
      security:
        - tk00001: []
      parameters:
        - name: id
          in: path
          required: true
          description: Appointment id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Appointment'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Appointment'
      operationId: AppointmentModify
    delete:
      tags:
        - Appointment
      summary: Delete appointment
      description: Using this endpoint you can delete an appointment within the account.
      security:
        - tk00001: []
      parameters:
        - name: id
          in: path
          description: Appointment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
      operationId: AppointmentDelete
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/appointment/{id}/schedule':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: "Demande de replanification d'un rendez-vous"
      tags:
        - Appointment
      responses:
        '200':
          description: OK
        '409':
          description: Conflict. Timeslot is not avalailable.
      operationId: AppointmentReschedule
      security:
        - tk00001: []
      description: "Lecture de l'horaire d'un rendez-vous"
  /account:
    get:
      tags:
        - Account
      summary: Lire les informations sur le compte
      description: Récupère les informations détaillées sur le compte
      security:
        - tk00001: []
      parameters:
        - name: company_id
          schema:
            type: integer
          in: query
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Account'
      operationId: AccountGetInfo
  '/availabilities/{id}':
    get:
      tags:
        - Availability
      summary: Get Availability Info
      description: Retrieve timeslot
      security:
        - tk00001: []
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
      operationId: AvailibilityGetInfo
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Timeslot id. This value identifies one of the avalilable timeslots returned by the POST request.
  /availabilities:
    post:
      summary: ''
      operationId: post-availability
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeslot'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimSummary'
            required: true
      description: |
        Request available timeslots.
        La requête contient les informations sur le type d'intervention

        **Expert**:
        - Type d'expertise
        - Informations sur l'assurance et le contrat
        - Garantie en jeu
        - Adresse
        - Qualification du sinistre, selon la codification Sinapps (origine, cause, détail)

        - Des données d'analyse de ClaimsIA (tiers, recours,...)
        - La pesée de l'enjeu


        **RENeur**:
        - Type de mission (???)
        - Informations sur l'assurance
        - Garantie en jeu
        - Adresse
        - Qualification du sinistre
      tags:
        - Availability
      security:
        - tk00001: []
    parameters: []
  /rdv:
    get:
      summary: get-appointment-info
      tags:
        - Appointment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '404':
          description: Not Found
      operationId: get-rdv
      description: Get appointment list
      parameters:
        - name: id
          in: query
          description: The appointment id
          schema:
            type: integer
        - name: location_id
          in: query
          schema:
            type: integer
        - name: client_id
          in: query
          schema:
            type: integer
        - name: timezone_id
          in: query
          description: Returns appointments date fields with specified time offset
          schema:
            type: integer
            example: 553
        - name: status
          in: query
          schema:
            type: string
        - name: search_text
          in: query
          schema:
            type: string
        - name: client_name
          in: query
          schema:
            type: string
        - name: client_email
          in: query
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
        - name: end_date
          in: query
          schema:
            type: string
        - name: start
          in: query
          description: List pager
          schema:
            type: integer
            default: 0
        - name: end
          in: query
          description: "List pager / 'all' - no limit"
          schema:
            oneOf:
              - type: integer
              - type: string
                enum:
                  - all
            default: 100
        - name: updated_after
          in: query
          description: Lower date limit for which the appointment was updated
          schema:
            type: string
            format: date-time
        - name: updated_before
          in: query
          description: Upper date limit for which the appointment was updated
          schema:
            type: string
            format: date-time
        - name: num_results
          in: query
          description: 'If 1, the call returns only the number of appointments found'
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
        - name: sort_by
          in: query
          schema:
            type: string
            default: start_date
            enum:
              - start_date
              - created
        - name: sort_order
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      security:
        - tk00001: []
    post:
      summary: create-appointment
      tags:
        - Appointment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
      operationId: post-rdv
      description: create appointment
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Timeslot'
                - $ref: '#/components/schemas/Claim'
  /appointments:
    get:
      tags:
        - Appointment
      summary: Lister les rendez-vous
      description: "Using this endpoint you can retrieve the attributes of all your existing Setster appointments. We advise using filters to fetch appointments on specific date ranges or attributes. See Filtering appointments in the Introduction section. \n\n---\n\n<!-- theme: warning -->\n\n> dsfdfds  \n>\n> dsfdsfdsfsdf\n\n\n"
      security:
        - tk00001: []
      parameters:
        - name: id
          in: query
          description: The appointment id
          schema:
            type: integer
        - name: location_id
          in: query
          schema:
            type: integer
        - name: client_id
          in: query
          schema:
            type: integer
        - name: timezone_id
          in: query
          description: Returns appointments date fields with specified time offset
          schema:
            type: integer
            example: 553
        - name: status
          in: query
          schema:
            type: string
        - name: search_text
          in: query
          schema:
            type: string
        - name: client_name
          in: query
          schema:
            type: string
        - name: client_email
          in: query
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
        - name: end_date
          in: query
          schema:
            type: string
        - name: start
          in: query
          description: List pager
          schema:
            type: integer
            default: 0
        - name: end
          in: query
          description: "List pager / 'all' - no limit"
          schema:
            oneOf:
              - type: integer
              - type: string
                enum:
                  - all
            default: 100
        - name: updated_after
          in: query
          description: Lower date limit for which the appointment was updated
          schema:
            type: string
            format: date-time
        - name: updated_before
          in: query
          description: Upper date limit for which the appointment was updated
          schema:
            type: string
            format: date-time
        - name: num_results
          in: query
          description: 'If 1, the call returns only the number of appointments found'
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
        - name: sort_by
          in: query
          schema:
            type: string
            default: start_date
            enum:
              - start_date
              - created
        - name: sort_order
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    description: Array of appointments
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Appointment'
                    required:
                      - data
          headers: {}
      operationId: AppointmentsGetList
    post:
      tags:
        - Appointment
      summary: Create appointment
      description: "Using this endpoint you can create a new appointment within the account. You will have to specify the service and the service provider you are creating the appointment for, along with all the other appointment attributes. This will initiate the scheduling process within Setster. \n\n### Documentation\n\n- [Codes des compagnies](docs/companies.md)\n"
      security:
        - tk00001: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Appointment'
                timeslot:
                  $ref: '#/components/schemas/Timeslot'
                claim:
                  $ref: '#/components/schemas/Claim'
              required:
                - timeslot
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: The appointment has been created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
        '403':
          description: The appointment can not be created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseStatus'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
      operationId: AppointmentCreate
    parameters: []
components:
  securitySchemes:
    tk00001:
      type: apiKey
      name: session_token
      in: query
      description: |
        To get the session_token, first you need to make a POST
        request to "account/authenticate" using your API key or
        username and password. The session token is the element
        "data.session_token" from the response.
  schemas:
    Account:
      allOf:
        - properties:
            id:
              type: integer
              readOnly: true
            company_id:
              type: integer
              format: int64
              example: 2345
              description: Unique ID of the account
              readOnly: true
            created_by:
              type: integer
              format: int64
              example: 1242
              description: ID of the company owner
              readOnly: true
            address_city:
              type: string
              description: Account/Default location personal info.
              example: Los Angeles
            address_country:
              type: string
              description: Account/Default location personal info.
              example: USA
            address_state:
              type: string
              description: Account/Default location personal info.
              example: Nevada
            address_street1:
              type: string
              description: Account/Default location personal info.
              example: 123 Street
            address_street2:
              type: string
              description: Account/Default location personal info.
              example: ''
            addresszip:
              type: string
              description: Account/Default location personal info.
              example: '245235'
            send_to_contact:
              type: integer
              default: 0
            show_map_profile:
              type: boolean
              default: false
            splash:
              type: string
            map_url:
              type: string
              format: uri
              description: An http address used for locations display
              example: ''
            return_url:
              type: string
            policies:
              type: string
            account_type:
              type: integer
              description: 'Account bussiness profile: 0 - Free User, 1 - Personal, 2 - Small Business, 4 - Medium Business, 5 - Large Business, 6 - Team'
              enum:
                - 0
                - 1
                - 2
                - 4
                - 5
                - 6
              format: int32
              example: 0
            date_created:
              type: string
              format: date-time
              readOnly: true
            no_views:
              type: string
              readOnly: true
            notify_app_unconfirmed:
              type: boolean
              default: true
            notify_app_unpaid:
              type: boolean
              default: true
            lang:
              type: string
              enum:
                - en
                - fr
                - es
              description: Language
              default: en
            enable_locations:
              type: boolean
              description: Allow other location than the implicit one
              default: false
            capture_leads:
              type: string
            settings:
              type: string
              format: json
              readOnly: true
            status:
              type: integer
              default: 0
              readOnly: true
            directory:
              type: integer
              default: 0
            max_providers:
              type: integer
              format: int32
              description: The maximum number of locations and providers that the company is allowed to add
              default: 0
            business_hours_label:
              type: string
            policies_label:
              type: string
            paragraph_label:
              type: string
            timezone:
              type: integer
              format: int32
              description: Gmt offset in minutes
              example: -480
              default: 0
            exchange_sync_settings:
              type: object
              readOnly: true
              properties:
                host:
                  type: string
                account:
                  type: string
                password:
                  type: string
                  format: password
                sync_period:
                  type: integer
      type: object
    AvailabilityDetails:
      type: object
      properties:
        interval:
          type: integer
          format: int32
          description: The length (in minutes) of the appointment
          example: 60
        day:
          type: integer
          format: int32
          description: Selected day
          example: 15
        month:
          type: integer
          format: int32
          description: Selected month
          example: 8
        year:
          type: integer
          format: int32
          description: Selected year
          example: 2012
        times:
          type: array
          description: 'Hash table of the start times of the available appointment slots, grouped by date'
          items:
            type: string
            example: '09:00:00'
    AppointmentType:
      type: string
      title: AppointmentType
      enum:
        - Site
        - Visio
        - Telephonique
      description: '[Valeurs possibles](https://wiki.apps.darva.com/display/REFDOC/Valeurs+de+codes#Valeursdecodes-Typedurendez-vous)'
      x-tags:
        - Common
        - Sinapps
    ZZZ_Damages:
      title: Damages
      type: object
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/BuildingDamage'
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentDamage'
      x-tags:
        - ClaimsIA
    ContentDamage:
      title: ContentDamage
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        brandAndModel:
          type: string
        category:
          type: string
        age:
          $ref: ./models/CIAC_Age.v1.yaml
        buyingPrice:
          $ref: ./models/CIAC_Amount.v1.yaml
        marketPrice:
          $ref: ./models/CIAC_Amount.v1.yaml
        invoice:
          $ref: ./models/CIAC_Attachment.v1.yaml
        pictures:
          type: array
          items:
            $ref: ./models/CIAC_Attachment.v1.yaml
    Customer:
      title: Customer
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        coordinates:
          $ref: ./models/CIAC_Coordinates.v1.yaml
    Estimation:
      title: Estimation
      type: object
      properties:
        cost:
          $ref: ./models/CIAC_Amount.v1.yaml
        contentsCount:
          type: integer
        roomsCount:
          type: integer
    Contract:
      title: Contract
      type: object
      properties:
        company:
          $ref: ./models/CIAC_Company.v1.yaml
        name:
          type: string
          description: Nom du contrat
      required:
        - company
        - name
    ClaimSummary:
      title: Claim
      type: object
      description: ''
      x-tags:
        - ClaimsIA
      x-examples:
        example-1:
          claimDate: '2020-04-02'
          guarantee: DegatDesEaux
          company:
            id: AVIVA
            name: Aviva
            acam: aviva
          location:
            country: FR
            city: Paris
            zipcode: '92200'
            street1: '49, rue de Paris'
          sinister:
            code: DegatDesEaux
            date: '2020-03-30'
            type: DegatDesEaux
      properties:
        claimDate:
          type: string
          format: date
          description: Date de déclaration
        guarantee:
          $ref: ./models/CIAC_WarrantyType.v1.yaml
        company:
          $ref: ./models/CIAC_Company.v1.yaml
        location:
          $ref: ./models/CIAC_PostalAddress.v1.yaml
        sinister:
          $ref: '#/components/schemas/Sinister'
        estimation:
          $ref: '#/components/schemas/Estimation'
      required:
        - claimDate
        - guarantee
        - company
        - location
    Qualification:
      title: Qualification
      type: object
      description: |
        Le sinistre est qualifié par le trio de données **Nature/Cause/Détail**.

        Selon les sinistres, le détail de la cause peut ne pas être renseigné. Les valeurs de ces trois informations suivent la codification **Sinapps**.

        [Liste des valeurs possibles](docs/sinapps/Nature-du-sinistre.md)

        Le complément correspond aux informations définies par Claims IA et est optionnel.
      properties:
        characteristic:
          $ref: ./models/CIAC_SinisterCharacteristic.v1.yaml
        complement:
          $ref: '#/components/schemas/QualificationComplement'
      required:
        - characteristic
    QualificationComplement:
      title: QualificationComplement
      description: "Le complément de qualification regroupe des informations établies par Claims IA à l'issue de la déclaration de sinistre."
      type: object
      properties:
        thirdParty:
          type: boolean
          description: Tiers en cause?
        insuredResponsible:
          type: boolean
          description: "Est-ce que l'assuré est responsable?"
        remedy:
          type: boolean
          description: Recours possible?
        recourse:
          type: boolean
          description: Action en remboursement possible?
    BuildingDamage:
      title: BuildingDamage
      type: object
      description: "Description de dommage immobilier\n\n- Nom de la pièce\n- Tableau de surfaces\n\n### Surface\n\n* Nom\n* Superficie\n* Revêtement\n  - Nom\n  - Nature (Darva 9079.01.01 - Nature objet ou corps d'état)\n  - Qualité du revêtement (Darva 9711.01.01 - catégorie du risque)\n    - (1: Normal, 2: Standing, 3: Luxe)\n  - niveau d'usure (1: neuf, 2: état d'usage, 3: ancien)\n      \n\n"
      properties:
        name:
          type: string
          description: Nom de la pièce
        surfaces:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Surface'
        pictures:
          type: array
          items:
            $ref: ./models/CIAC_Attachment.v1.yaml
        size:
          type: number
      required:
        - name
        - surfaces
    Timeslot:
      title: Timeslot
      type: object
      description: |-
        Le Timeslot est un créneau horaire retourné par le partenaire. Il est défini au minimum par une heure de début et une heure de fin.
        Une adresse peut être renseignée si elle est différente de l'adresse fournie dans la demande.
      properties:
        id:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        location:
          $ref: ./models/CIAC_PostalAddress.v1.yaml
      required:
        - id
        - startTime
        - endTime
    SurfaceCovering:
      title: Covering
      type: object
      description: |-
        Revêtement d'une surface.

        Le type de revêtement correspond globalement aux corps d'état. On s'appuie sur la codification Sinapps pour les valeurs (_cf. fichier [Detail-nature-dommage](docs/sinapps/Detail-nature-dommages.md)_)
      properties:
        name:
          type: string
        type:
          type: string
          description: "Nature du revêtement. \nListe des valeurs: cf.Sinapps - detailNatureDommages \n(anciennement DARVA 9711.01.01)"
        state:
          type: integer
          description: "Niveau d'usure. 1:neuf, 2:état d'usage, 3:ancien"
          enum:
            - 1
            - 2
            - 3
        quality:
          type: integer
          description: 'Qualité du revêtement. 1:normal, 2:standing, 3:luxe'
          enum:
            - 1
            - 2
            - 3
      required:
        - name
        - type
        - state
    Surface:
      title: Surface
      type: object
      description: |
        Surface d'une pièce: mur, sol, plafond
      properties:
        name:
          type: string
          description: Nom de la surface
        size:
          type: string
          description: Superficie en m2
        covering:
          $ref: '#/components/schemas/SurfaceCovering'
        condition:
          type: string
          description: Etat général de la surface
      required:
        - name
        - size
        - covering
    Sinister:
      title: Sinister
      type: object
      properties:
        code:
          type: string
          minLength: 2
          maxLength: 2
          pattern: '[a-zA-Z0-9][a-zA-Z0-9]'
          description: Nature du sinistre - code DARVA
        date:
          type: string
          format: date
          description: Date du sinistre
        type:
          type: string
          description: Code DARVA 9209.01.01-NATURE DU SINISTRE
        qualification:
          $ref: '#/components/schemas/Qualification'
        damages:
          $ref: ./models/CIAC_Damages.v1.yaml
      required:
        - code
        - date
        - type
    ResponseStatus:
      type: object
      description: ResponseStatus donne une information sur la réponse. Il contient un code numérique et une description.
      x-examples:
        example:
          value: 0
          statusCode: 0
          statusDescription: 'Cool Baby!'
      properties:
        value:
          type: integer
          format: int32
          description: "Statut de l'opération."
          example: 0
          enum:
            OK: 0
            INVALID_PARAMETERS: 1
            INVALID_CREDENTIALS: 2
            ACCOUNT_NOT_ACTIVE: 3
            INTERNAL_ERROR: 4
            ERROR_SAVING_ENTITY: 5
            ERROR_DELETING: 6
            NOT_FOUND: 7
            NOT_ALLOWED: 8
            SLOT_NOT_AVAILABLE: 9
            SLOT_OCCUPIED: 10
            ACCOUNTS_LIMIT_REACHED: 11
        descriptions:
          type: string
          example: OK
          description: Description of the status
      required:
        - value
    Location:
      type: object
      x-examples: {}
      description: "Représentation d'un lieu"
      title: Location
      properties:
        name:
          type: string
          description: Name of the location
          example: Spa center
        description:
          type: string
          description: Description of the location
          default: ''
        is_main:
          type: boolean
          readOnly: true
          default: false
          description: "Détermine s'il s'agit du lieu du sinistre"
        address:
          $ref: ./models/CIAC_PostalAddress.v1.yaml
        photo:
          type: string
          format: uri
          description: Photo URL
          example: ''
        phone:
          type: string
          description: Phone number
          default: ''
        tags:
          type: string
          default: ''
        timezone_id:
          type: string
          description: The ID of the time zone
          example: '553'
        lat:
          type: number
          format: float
          description: The latitude of the location automatically calculated based on its address
        lng:
          type: number
          format: float
          description: The longitude of the location automatically calculated based on its address
        update_lat_lng:
          type: boolean
          description: Available only on update. If true (1) then the lat and lng values will be automatically calculated
          default: false
          writeOnly: true
        ord:
          type: integer
          default: 0
          readOnly: true
        UID:
          type: string
          description: Identifiant unique du lieu
      required:
        - name
        - UID
    Claim:
      title: Claim
      type: object
      description: ''
      properties:
        date:
          type: string
          format: date
          description: Date de déclaration
        guarantee:
          $ref: ./models/CIAC_WarrantyType.v1.yaml
        customer:
          $ref: '#/components/schemas/Customer'
        sinister:
          $ref: ./models/CIAC_Sinister.v1.yaml
        documents:
          type: array
          items:
            $ref: ./models/CIAC_Attachment.v1.yaml
        estimation:
          $ref: '#/components/schemas/Estimation'
        contract:
          $ref: '#/components/schemas/Contract'
        reference:
          type: string
          description: Référence ClaimsIA de la déclaration
      required:
        - date
        - guarantee
      x-tags:
        - ClaimsIA
    AppointmentChangeReason:
      type: string
      title: AppointmentChangeReason
      enum:
        - ErreurDeSaisie
        - ClientIndisponible
        - ExpertIndisponible
        - TiersIndisponible
        - DossierIncomplet
        - RendezVousNonUtile
        - Autre
      description: Motif de changement de rendez-vous
      x-tags:
        - ClaimsIA
        - Sinapps
    Appointment:
      type: object
      properties:
        address:
          $ref: ./models/CIAC_PostalAddress.v1.yaml
        notes:
          $ref: ./models/CIAC_NonEmptyString.v1.yaml
        createdAt:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/AppointmentType'
        schedule:
          $ref: '#/components/schemas/AppointmentSchedule'
        customer:
          $ref: '#/components/schemas/Customer'
      required:
        - type
        - schedule
    AppointmentSchedule:
      title: AppointmentTime
      type: object
      description: Horaire de rendez-vous
      x-examples:
        Horaire fixe:
          type: HoraireFixe
          startTime: '2020-05-14T10:00:00Z'
          endTime: '2020-05-14T11:30:00Z'
          duration: 90
        Plage horaire:
          type: HorairePlage
          startTime: '2020-05-14T09:00:00Z'
          endTime: '2020-05-14T10:00:00Z'
          duration: 60
      properties:
        type:
          type: string
          enum:
            - HoraireFixe
            - HorairePlage
          description: |-
            Si "HoraireFixe", le rendez commence à "startTime" et fini à "endTime"

            Si "HorairePlage", le rendez-vous de "duration" minutes aura lieu n'importe quand entre "startTime" et "endTime"
        startTime:
          type: string
          format: date-time
          example: '2020-05-14T09:00:00Z'
        endTime:
          type: string
          format: date-time
          example: '2020-05-14T09:00:00Z'
        duration:
          $ref: ./models/CIAC_Duration.v1.yaml
      required:
        - type
        - startTime
        - endTime
      x-tags:
        - ClaimsIA
        - Appointment
security:
  - session_token: []
